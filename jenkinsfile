pipeline{
    agent any
    environment{
        VERSION = "${env.BUILD_ID}"
    }
    /*options {
    buildDiscarder(logRotator(daysToKeepStr: '1', numToKeepStr: '3'))
    // This is required if you want to clean before build
        skipDefaultCheckout(true)
  }
  */
    stages{
        stage("Gradle Build") {
            steps{
                script{
             if (isUnix()) {
                 sh 'chmod +x gradlew'
                 sh './gradlew clean build'
    } 
             else {
                 sh 'chmod +x gradlew'
                 bat 'gradlew.bat clean build'
    }  
}
            }
        }
        stage("Gradle test") {
            steps{
                script{
             if (isUnix()) {
                 sh 'chmod +x gradlew'
                 sh './gradlew  test'
    } 
             else {
                 sh 'chmod +x gradlew'
                 bat 'gradlew.bat test'
    }
}
            }
        }
        
        stage("sonar quality check"){

            steps{
                script{
                    withSonarQubeEnv(credentialsId: 'sonar-token') {

                            sh 'chmod +x gradlew'
                            sh './gradlew sonarqube'
                }
                timeout(time: 1, unit: 'HOURS') {
                      def qg = waitForQualityGate()
                      if (qg.status != 'OK') {
                           error "Pipeline aborted due to quality gate failure: ${qg.status}"
                      }
                    }

                      }           
                }
        }
        stage("docker build & docker push"){
            steps{
                script{
                    withCredentials([string(credentialsId: 'docker_pass', variable: 'docker_password')]) {
                             sh '''
                                docker build -t 192.168.1.11:8083/springapp:${VERSION} .
                                docker login -u admin -p $docker_password 192.168.1.11:8083 
                                docker push  192.168.1.11:8083/springapp:${VERSION}
                                docker rmi 192.168.1.11:8083/springapp:${VERSION}
                            '''
                    }
                    
                }
            }
        
        }
    }
    post {
		always {
			mail bcc: '', body: "<br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "${currentBuild.result} CI: Project name -> ${env.JOB_NAME}", to: "meryem.cherkaouidakkaki@usmba.ac.ma";  
		}
	} 
    
}




  
